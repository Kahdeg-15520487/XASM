using System.Collections.Generic;
using System.Linq;

// Set the name of your grammar here (and at the end of this grammar):
COMPILER XASM

// Add auxiliary methods and declaration here.

	ScriptEmitter emitter;// = new ScriptEmit();
	Scope global = new Scope();
	Scope currScope;
	List<HostAPILibrary> hapilibs = new List<HostAPILibrary>();

// If you want your generated compiler case insensitive add the
// keyword IGNORECASE here.
IGNORECASE

CHARACTERS
// Add character set declarations here.
// Examples:
letter = 'A'..'Z' + 'a'..'z'.
sign = "+-".
digit = "0123456789".
whitespace = ' '.
comma = ','.
dot = '.'.
cr = '\r'.
lf = '\n'.
tab = '\t'.
underscore = '_'.
newLine = cr + lf.
quote = "'".
doublequote = '"'.


TOKENS
// Add token declarations here.
// Example:
ident = [{underscore}] letter {letter | digit | underscore}.
intergerLiteral = [sign] digit {digit}.
floatLiteral = [sign] digit {digit} dot digit {digit}.
charLiteral	= quote ( letter | digit ) quote.
stringLiteral = doublequote letter {letter | digit | underscore | whitespace | comma} doublequote.

colon = ':'.
openBracket = "[".
closeBracket = "]".
openBrace = "{".
closeBrace = "}".
leftanglebracket = '<'.
rightanglebracket = '>'.


PRAGMAS
// Add pragma declarations here.
// Example:
//   switch = '$' { digit | letter }. (. Optional semantic action .)


// Add comments here.
// Example for a multi-line block comment:
//   COMMENTS FROM "/*" TO "*/" NESTED
// Example for a single line comment:
//   COMMENTS FROM "//" TO lf

COMMENTS FROM ';' TO lf

// Set the ignored characters (whitespaces) here, the blank character is
// ignored by default.
// Example, add line breaks to the ignore set.
IGNORE cr + lf + whitespace + tab


PRODUCTIONS

// Add your productions here, one must have the same name as the grammar,
// it will be the start Variable (entry point of your compiler).
// Example:
//   XASM = "BEGIN" { Statement } "END".
//   Statement = ident "=" number { "+" number } .



literal <out Value lit>									(. lit = new Value(); string temp; .)
= intergerLiteral										(. lit = new Value(int.Parse(t.val)); .)
| floatLiteral 											(. lit = new Value(float.Parse(t.val)); .)
| charLiteral 											(. temp = t.val.Remove(t.val.Length-1,1).Remove(0,1);
															lit = new Value(char.Parse(temp)); .)
| stringLiteral											(. temp = t.val.Remove(t.val.Length-1,1).Remove(0,1);
															lit = new Value(emitter.AddString(temp),ValType.stringLiteral);
														.)
| ("true" | "false")							(. lit = new Value(bool.Parse(t.val)); System.Console.WriteLine(lit.ToString());.)
														.

identifier<out string name>
= ident													(. name = t.val;.).

operand <out Value operand> 							(.
															operand = new Value(); 
															string name,name2; 
															Value lit,lit2;
														.)
=	literal	<out lit>									(. operand.Assign(lit); .)
|	identifier <out name>								(. operand.type = ValType.stackReference;
														   if (!currScope.ContainVariable(name) 
																&& !currScope.ContainParameter(name)
																&& (name.CompareTo("retval") != 0))
														     SemErr(name + " is not defined");
														   operand.s = name;
														.)
[	
	openBracket							(. .)
		( literal <out lit>				(.	if (lit.IsInterger())
					                            operand.i = lit.i;
					                        else{
					                            SemErr("Array index must be of type intergerLiteral");
					                        }.)
		| identifier <out name2>		(.  operand.type = ValType.arrayIndex;
											operand.s +='|' + name2; .)
		) 
	closeBracket										
]
|	leftanglebracket
	literal <out lit>					(.	if (lit.IsInterger()){
						                        operand.type = ValType.stackIndex;
						                        operand.i = lit.i;
											}
											else{
					                            SemErr("Stack direct index must be of type intergerLiteral");
											}
										.)
	[	','
		literal <out lit2>				(.	if (lit2.IsInterger()){
						                        operand.i += lit2.i;
											}
											else{
					                            SemErr("Stack direct index must be of type intergerLiteral");
											}
										.)
	]
	rightanglebracket
.

variableDeclare <out string name>						(.  .)
=	"var" identifier <out name>							(.  Value lit;
															currScope.AddVariable(name);
										if (verbose)
											System.Console.WriteLine(name + " " + (currScope.IsGlobalScope ? "global" : "local")); 
														.)
[
	//array
	openBracket literal<out lit> closeBracket		 	(. 
					if (lit.IsInterger())
					{
					    currScope.RemoveVariable(name);
					    currScope.AddArray(name, lit.i);
					}
					else
					{
					    SemErr("Array's capacity must be an intergerLiteral");
					} .)
]
.

parameterDeclare <out string name>
= "param" identifier <out name>							(. currScope.AddParameter(name);
														if (verbose)
														   System.Console.WriteLine(name + " param"); 
														.)
.

linelabelDeclare <out string name> 
= identifier<out name> colon							(.  .).

instruction <out Instruction instr>						(. Value op1,op2,op3; 
														   string name;
														   instr = new Instruction(OpCode.ret);.)
=  (
	"mov" operand <out op1> ',' operand<out op2>		(. instr = new Instruction(OpCode.mov, op1 ,op2); .)

|	"add" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.add, op1,op2); .)
|	"sub" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.sub, op1,op2); .)
|	"mul" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.mul, op1,op2); .)
|	"div" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.div, op1,op2); .)
|	"mod" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.mod, op1,op2); .)
|	"exp" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.exp, op1,op2); .)
|	"and" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.and, op1,op2); .)
|	"or"  operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.or, op1,op2); .)
|	"xor" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.xor, op1,op2); .)
|	"shl" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.shl, op1,op2); .)
|	"shr" operand <out op1> ',' operand<out op2>		(. instr  = new Instruction(OpCode.shr, op1,op2); .)
|	"gettype" operand <out op1> ',' operand <out op2>	(. instr = new Instruction(OpCode.gettype, op1,op2); .)
|	"concat" operand <out op1> ',' operand <out op2>	(. instr = new Instruction(OpCode.concat, op1,op2); .)


|	"call" identifier <out name>			(. instr  = new Instruction(OpCode.call, new Value(name,ValType.intergerLiteral)); .)
|	(.string name2;.)
	"callhost" identifier <out name>		(. int tttt = hapilibs.Count(hapilib =>
											{
											    return hapilib.ContainsHostAPI(name);
											});
											switch (tttt)
											{
											    case 0:
										if (!hapilibs.Any(hapilib => string.Compare(hapilib.HAPILibraryName, name, true) == 0))
											        SemErr("There is no HAPI library contains " + name);
											        break;
											    case 1:
											        instr = new Instruction(OpCode.callhost, new Value(emitter.AddHAPI(name)));
											        break;
											    default:
											        SemErr("There is more than 1 HAPI library contains " + name);
											        break;
											} .)
	['.' identifier <out name2> 
								(.	if (hapilibs.FirstOrDefault(hapilib=>
									    {
									        return string.Compare(hapilib.HAPILibraryName, name, true) == 0;
									    }) ==null)
									{
									    SemErr("Missing reference to " + name);
									}
									instr  = new Instruction(OpCode.callhost, new Value(emitter.AddHAPI(name + '.' + name2))); .)
	]
|	"push" operand <out op1>							(. instr  = new Instruction(OpCode.push, op1); .)
|	"pop" operand <out op1>								(. instr  = new Instruction(OpCode.pop, op1); .)
|	"jmp" identifier <out name>							(. instr  = new Instruction(OpCode.jmp,new Value(name)); .)
|	"neg" operand <out op1>								(. instr  = new Instruction(OpCode.neg, op1); .)
|	"inc" operand <out op1>								(. instr  = new Instruction(OpCode.inc, op1); .)
|	"dec" operand <out op1>								(. instr  = new Instruction(OpCode.dec, op1); .)
|	"not" operand <out op1>								(. instr  = new Instruction(OpCode.not, op1); .)
|	"pause" operand <out op1>							(. instr  = new Instruction(OpCode.pause, op1); .)
|	"exit" operand <out op1>							(. instr  = new Instruction(OpCode.exit, op1); .)

|	"ret"												(. instr  = new Instruction(OpCode.ret); .)

|	"je" operand <out op1> ',' operand <out op2> ',' identifier <out name>
													(. instr  = new Instruction(OpCode.je,op1,op2,new Value(name)); .)
|	"jne" operand <out op1> ',' operand <out op2> ',' identifier <out name>
													(. instr  = new Instruction(OpCode.jne,op1,op2,new Value(name)); .)
|	"jg" operand <out op1> ',' operand <out op2> ',' identifier <out name>
													(. instr  = new Instruction(OpCode.jg,op1,op2,new Value(name)); .)
|	"jl" operand <out op1> ',' operand <out op2> ',' identifier <out name>
													(. instr  = new Instruction(OpCode.jl,op1,op2,new Value(name)); .)
|	"jge" operand <out op1> ',' operand <out op2> ',' identifier <out name>
													(. instr  = new Instruction(OpCode.jge,op1,op2,new Value(name)); .)
|	"jle" operand <out op1> ',' operand <out op2> ',' identifier <out name>
													(. instr  = new Instruction(OpCode.jle,op1,op2,new Value(name)); .)
|	"getchar" operand <out op1> ',' operand <out op2> ',' operand <out op3>
													(. instr  = new Instruction(OpCode.getchar,op1,op2,op3); .)
|	"setchar" operand <out op1> ',' operand <out op2> ',' operand <out op3>
													(. instr  = new Instruction(OpCode.setchar,op1,op2,op3); .)
)
(.//check type safety
	
.).


functionDeclare <out Function func>						(. string name; string funcname = string.Empty; Instruction instr;
														   List<Instruction> instrs = new List<Instruction>();
														   Dictionary<string,int> lineLabels = new Dictionary<string,int>();
														   int paramCount = 0,varCount = 0,entry = emitter.CurrentLine;.)
=	"func" identifier <out name>						(. currScope = global.AddScope(name);		//todo check function duplicate
														   funcname = name; .)
	openBrace

	{
		parameterDeclare <out name>						(.  .)
	|
		variableDeclare	<out name>						(.  .)
	|
		linelabelDeclare <out name>						(. 
					if (lineLabels.Keys.Contains(name))
					    SemErr("Label already declared");
					else
					    lineLabels.Add(name,entry + instrs.Count); 
.)
	|	instruction	<out instr>							(. instrs.Add(instr); .)
//todo check push pop and callhost to make stack safe
	}
														(. instrs.Add(new Instruction(OpCode.ret)); .)
	closeBrace
				(.	
					if (verbose){
				        System.Console.WriteLine();
				        System.Console.WriteLine(currScope.ToString());
					}

					for (int ic = 0; ic< instrs.Count;ic++){
					    var tempinstr = instrs[ic];
					    switch (tempinstr.opcode)
					    {
					    	case OpCode.jmp:
					    		instrs[ic].operands[0] = new Value(lineLabels[tempinstr.operands[0].s]);
					    		break;

					    	case OpCode.je:
					    	case OpCode.jne:
					    	case OpCode.jl:
					    	case OpCode.jg:
					    	case OpCode.jle:
					    	case OpCode.jge:
					    		instrs[ic].operands[2] = new Value(lineLabels[tempinstr.operands[2].s]);
					    		break;

					    	default:
					    		break;
					    }
					    for (int oc = 0; oc<instrs[ic].operands.GetLength(0);oc++){
					        var tempop = instrs[ic].operands[oc];
				            switch (tempop.type){
				                case ValType.stackReference:
				                    if (currScope.ContainVariable(tempop.s))
				                        instrs[ic].operands[oc].i = currScope.GetStackIndexOfVariable(tempop.s) + tempop.i;
				                    else instrs[ic].operands[oc].i = currScope.GetStackIndexOfParameter(tempop.s);
				                    break;
				                case ValType.arrayIndex:
				                    var arrayindex = tempop.s.Split('|');
				                    if (currScope.ContainVariable(arrayindex[0])){
				                        instrs[ic].operands[oc].i = currScope.GetStackIndexOfVariable(arrayindex[0]);
				                        instrs[ic].operands[oc].arrid = currScope.GetStackIndexOfVariable(arrayindex[1]);
				                    }
				                    break;
				            }
				        }
				        emitter.AddInstruction(instrs[ic]);
				        if (verbose)
				            System.Console.WriteLine(emitter.CurrentLine-1 + " : " + instrs[ic]);
				    }
        int stackeval = 0;
        int pushcount = 0;
        int popcount = 0;
        int callhost_count = 0;
        for (int ic = 0; ic< instrs.Count;ic++){
            switch (instrs[ic].opcode){
                case OpCode.push:
                    stackeval++;
                    pushcount++;
                    break;
                case OpCode.pop:
                    stackeval--;
                    popcount++;
                    break;
                case OpCode.callhost:
                    HostAPI hapi;
                    string hapiname = emitter.hapitable[instrs[ic].operands[0].i];
                    if (hapiname.Contains('.'))
                    {
                        var tttt = hapiname.Split('.');
                        hapi = hapilibs.First(lib =>
                        {
                            return string.Compare(lib.HAPILibraryName, tttt[0], true) == 0;
                        }).GetAllHostAPI().First(h =>
                        {
                            return string.Compare(h.HAPIname, tttt[1], true) == 0;
                        });
                    }
                    else
                    {
                        hapi = hapilibs.First(lib =>
                        {
                            return lib.ContainsHostAPI(hapiname);
                        }).GetAllHostAPI().First(h =>
                        {
                            return string.Compare(h.HAPIname, hapiname, true) == 0;
                        });
                    }
                    stackeval -= hapi.paramCount;
                    callhost_count+=hapi.paramCount;
                    break;
            }
        }

        if (stackeval < 0)
        {
            SemErr(string.Format("Stack corruption: pop > push{0} push count: {1}{0} pop count: {2}{0} callhost count: {3}{0}",System.Environment.NewLine,pushcount,popcount,callhost_count));
        }
        else
        {
            if (stackeval > 0)
            {
                SemErr(string.Format("Stack corruption: pop < push{0} push count: {1}{0} pop count: {2}{0} callhost count: {3}{0}",System.Environment.NewLine,pushcount,popcount,callhost_count));
            }
        }
        varCount = currScope.variables.Count;
        paramCount = currScope.parameters.Count;
        func = new Function(entry,paramCount,varCount,funcname); .)
.

XASM=												(. string name; Function func; currScope = global; .)
													(. currScope.AddVariable("retval"); .)
{
//global variables
	variableDeclare	<out name>							(.  .)				//todo check variable duplicate
|	
	functionDeclare <out func>							(.  
															int funcindex = emitter.AddFunction(func);
										if (verbose){
															System.Console.WriteLine("entry : " + func.entryPoint);
															System.Console.WriteLine(func.paramCount + " parameter");
															System.Console.WriteLine(func.varCount + " local variable");
										}
														    if (string.Compare(func.funcName,"main")==0) {
														      emitter.mainFuncIndex = funcindex;
														   }
														.)
}
														(. emitter.AddInstruction(new Instruction(OpCode.exit,new Value(0)));
														   emitter.globalDataSize = global.variables.Count; 
										if (verbose){
														   System.Console.WriteLine("globalDataSize =" + emitter.globalDataSize);
														   System.Console.WriteLine("mainFuncIndex =" + emitter.mainFuncIndex);
										}.)
.

// End of your compiler specification, make sure the name here matches
// the grammar name at the start of this grammar.
END XASM.